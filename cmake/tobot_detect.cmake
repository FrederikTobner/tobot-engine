# Macro for adding os-specific compiler definitions
macro(Tobot_Detect_Platform)    
    if(UNIX)
    add_compile_definitions(OS_UNIX_LIKE)    
    if(NOT APPLE) 
        if(CMAKE_SYSTEM_NAME MATCHES ".*Linux")
            add_compile_definitions(OS_LINUX)
        elseif(CMAKE_SYSTEM_NAME MATCHES "kFreeBSD.*")
            message(FATAL_ERROR "The project has not been implemented for kFreeBSD yet")
        elseif(CMAKE_SYSTEM_NAME MATCHES "kNetBSD.*|NetBSD.*")
            message(FATAL_ERROR "The project has not been implemented for NetBSD yet")
        elseif(CMAKE_SYSTEM_NAME MATCHES "kOpenBSD.*|OpenBSD.*")
            message(FATAL_ERROR "The project has not been implemented for OpenBSD yet")
        elseif(CMAKE_SYSTEM_NAME MATCHES ".*GNU.*")
            message(FATAL_ERROR "The project has not been implemented for GNU linux types yet")
        elseif(CMAKE_SYSTEM_NAME MATCHES ".*BSDI.*")
            message(FATAL_ERROR "The project has not been implemented for BSDI yet")
        elseif(CMAKE_SYSTEM_NAME MATCHES "DragonFly.*|FreeBSD")
            message(FATAL_ERROR "The project has not been implemented for FreeBSD yet")
        elseif(CMAKE_SYSTEM_NAME MATCHES "SYSV5.*")
            message(FATAL_ERROR "The project has not been implemented for SYSV5 yet")
        elseif(CMAKE_SYSTEM_NAME MATCHES "Solaris.*|SunOS.*")
            message(FATAL_ERROR "The project has not been implemented for Solaris yet")
        elseif(CMAKE_SYSTEM_NAME MATCHES "HP-UX.*")
            message(FATAL_ERROR "The project has not been implemented for HP-UX yet")
        elseif(CMAKE_SYSTEM_NAME MATCHES "AIX.*")
            message(FATAL_ERROR "The project has not been implemented for AIX yet")
        elseif(CMAKE_SYSTEM_NAME MATCHES "Minix.*")
            message(FATAL_ERROR "The project has not been implemented for Minix yet")
        else()
            message(FATAL_ERROR "The project has not been implemented for unknown unix OS types yet")
        endif()
    else() 
        if(CMAKE_SYSTEM_NAME MATCHES ".*Darwin.*")
            add_compile_definitions(OS_DARWIN)
        elseif(CMAKE_SYSTEM_NAME MATCHES ".*MacOS.*")
            add_compile_definitions(OS_MACOS)
        elseif(CMAKE_SYSTEM_NAME MATCHES ".*tvOS.*")
            message(FATAL_ERROR "The project has not been implemented for TVOS yet")
        elseif(CMAKE_SYSTEM_NAME MATCHES ".*iOS.*")
            message(FATAL_ERROR "The project has not been implemented for IOS yet")
        else()
            message(FATAL_ERROR "The project has not been implemented for unknown apple os types yet")
        endif()
    endif()
    elseif(WIN32)
        add_compile_definitions(OS_WINDOWS)
    elseif(CMAKE_SYSTEM_NAME MATCHES "Haiku.*")
        message(FATAL_ERROR "The emulator has not been implemented for Haiku yet")
    elseif(NINTENDO_3DS)
        message(FATAL_ERROR "The project has not been implemented for the 3DS yet")
    else()
        message(FATAL_ERROR "The underlying operating system was not recognized")
    endif()
endmacro(Tobot_Detect_Platform)

# Macro for adding compiler definitions based on the compiler that is used 
# Could be extended - https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html
macro(Tobot_Detect_Compiler)
    if(CMAKE_C_COMPILER_ID STREQUAL "GNU")
        add_compile_definitions(COMPILER_GCC)
    elseif(CMAKE_C_COMPILER_ID STREQUAL "Clang")
        add_compile_definitions(COMPILER_CLANG)
    elseif(CMAKE_C_COMPILER_ID STREQUAL "MSVC")
        add_compile_definitions(COMPILER_MSVC)
    elseif (CMAKE_C_COMPILER_ID STREQUAL "Intel")
        add_compile_definitions(COMPILER_INTEL)
    else()
        add_compile_definitions(COMPILER_UNKNOWN)
    endif()    
endmacro(Tobot_Detect_Compiler)
